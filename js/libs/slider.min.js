! function (s, t) {
  "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.Slider = t() : s.Slider = t()
}(this, (function () {
  return function () {
    "use strict";
    var s = {
        d: function (t, i) {
          for (var o in i) s.o(i, o) && !s.o(t, o) && Object.defineProperty(t, o, {
            enumerable: !0,
            get: i[o]
          })
        },
        o: function (s, t) {
          return Object.prototype.hasOwnProperty.call(s, t)
        }
      },
      t = {};

    function i(s) {
      return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (s) {
        return typeof s
      } : function (s) {
        return s && "function" == typeof Symbol && s.constructor === Symbol && s !== Symbol.prototype ? "symbol" : typeof s
      }, i(s)
    }

    function o(s, t) {
      for (var i = 0; i < t.length; i++) {
        var o = t[i];
        o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(s, n(o.key), o)
      }
    }

    function e(s, t, i) {
      return (t = n(t)) in s ? Object.defineProperty(s, t, {
        value: i,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : s[t] = i, s
    }

    function n(s) {
      var t = function (s) {
        if ("object" != i(s) || !s) return s;
        var t = s[Symbol.toPrimitive];
        if (void 0 !== t) {
          var o = t.call(s, "string");
          if ("object" != i(o)) return o;
          throw new TypeError("@@toPrimitive must return a primitive value.")
        }
        return String(s)
      }(s);
      return "symbol" == i(t) ? t : t + ""
    }
    s.d(t, {
      default: function () {
        return r
      }
    });
    var r = function () {
      return s = function s(t) {
        var i = this;
        if (function (s, t) {
            if (!(s instanceof t)) throw new TypeError("Cannot call a class as a function")
          }(this, s), e(this, "isPressed", !1), e(this, "count", 0), e(this, "cursorX", void 0), e(this, "cursorY", void 0), e(this, "result", void 0), e(this, "lastResult", void 0), e(this, "row", 1), e(this, "swipe", !0), e(this, "slideSmall", 0), e(this, "remainingStep", 0), e(this, "prevWidth", window.innerWidth), e(this, "handleMouseDown", (function (s) {
            i.isPressed = !0, i.cursorX = s.touches ? s.touches[0].screenX : s.screenX, s.touches && (i.cursorY = s.touches[0].screenY), $(s.currentTarget).css({
              cursor: "grabbing"
            })
          })), e(this, "handleMove", (function (s) {
            if (i.isPressed)
              if (i.cursorY && s.touches && Math.abs(i.cursorY - s.touches[0].screenY) > Math.abs(i.cursorX - (s.touches ? s.touches[0].screenX : s.screenX))) i.isPressed = !1;
              else {
                s.preventDefault();
                var t = i.numberOfMutiple ? i.numberOfMutiple : i.numberOfStep - 1;
                i.result = (i.cursorX - (s.touches ? s.touches[0].screenX : s.screenX)) / (i.count >= t && i.cursorX - (s.touches ? s.touches[0].screenX : s.screenX) > 0 ? 5 : 1), i.onSwipe && i.onSwipe(!0), $(i.root).find(".js-slider-wrap").css({
                  transition: "transform 0s cubic-bezier(0.1, 0.7, 0.6, 0.9)",
                  transform: "translate(-".concat(Math.floor((i.imageWidth + i.slideSpacing) * i.count + i.result), "px ,  0px)")
                })
              }
          })), e(this, "handleEnd", (function (s) {
            var t = i.numberOfMutiple ? i.numberOfMutiple : i.numberOfStep - 1;
            i.isPressed = !1, $(s.currentTarget).css({
              cursor: "initial"
            }), i.cb && (i.result && Math.abs(i.result) > 0 ? i.cb(!0) : i.cb(!1)), i.onSwipe && i.onSwipe(!1), i.result && i.count >= 0 && i.count <= t ? Math.abs(i.result) <= 0 || Math.abs(i.result) < (i.slideSmall > 0 ? i.slideSmall : i.imageWidth) / 10 ? i.handleSlide(i.count) : i.result > 0 ? (i.count >= t || i.count++, i.handleSlide(i.count)) : (i.count <= 0 && (i.count = 0, i.handleSlide(i.count)), i.count--, i.handleSlide(i.count)) : i.handleSlide(i.count), i.lastResult = i.result, i.result = null
          })), t) {
          if (this.infinite = t.infinite, this.bulletClass = t.bulletClass, this.transformBullet = t.transformBullet, this.root = t.root ? t.root : document, void 0 !== t.swipe && (this.swipe = t.swipe), t.isSwiping && (this.cb = t.isSwiping), t.onSwipe && (this.onSwipe = t.onSwipe), t.onChange && (this.onChange = t.onChange), !1 === t.viewportHidden && ($(this.root).css({
              overflow: "hidden"
            }), $(this.root).find(".js-slider-control").css({
              overflow: "initial"
            })), this.currentClass = t.currentClass, this.activeFunction = t.activeFunction, this.viewportHidden = t.viewportHidden, this.totalItem = $(this.root).find(".js-wrap-box").length, this.viewPortWidth = $(this.root).find(".js-slider-control").width(), t.slideSpacing ? this.slideSpacing = t.slideSpacing : this.slideSpacing = parseInt($(this.root).find(".js-wrap-box").css("margin-left") ? $(this.root).find(".js-wrap-box").css("margin-left") : 0), this.slideToShow = t.slideToShow && t.slideToShow >= 1 && t.slideToShow <= this.totalItem ? Math.floor(t.slideToShow) : 0, this.rootSlideToShow = t.slideToShow && t.slideToShow >= 1 && t.slideToShow <= this.totalItem ? Math.floor(t.slideToShow) : 0, this.row = t.row && t.row >= 1 && t.row <= this.totalItem ? t.row : 1, this.slidesToScroll = t.slidesToScroll && t.slidesToScroll >= 1 && t.slidesToScroll <= this.totalItem ? t.slidesToScroll : 1, this.rootSlidesToScroll = t.slidesToScroll && t.slidesToScroll >= 1 && t.slidesToScroll <= this.totalItem ? t.slidesToScroll : 1, this.prevSlidesToScroll = t.slidesToScroll && t.slidesToScroll >= 1 && t.slidesToScroll <= this.totalItem ? t.slidesToScroll : 1, this.breakpoint = t.breakpoint, this.breakpoint) {
            var o = Object.keys(this.breakpoint).sort((function (s, t) {
              return s - t
            })).filter((function (s) {
              return s >= $(window).width()
            }));
            o.length > 0 && (this.breakpoint[o[0]].slidesToScroll && (this.prevSlidesToScroll = this.breakpoint[o[0]].slidesToScroll, this.slidesToScroll = this.breakpoint[o[0]].slidesToScroll), this.breakpoint[o[0]].slideToShow && (this.slideToShow = this.breakpoint[o[0]].slideToShow))
          }
          if (this.slideSpacing > 0 && ($(this.root).find(".js-wrap-box").css({
              "margin-left": "".concat(this.slideSpacing, "px")
            }), $(this.root).find(".js-slider-wrap").css({
              "margin-left": "-".concat(this.slideSpacing, "px")
            })), this.slidesToScroll > 1) {
            this.cloneSlide = $(this.root).find(".js-wrap-box").clone(!0, !1), this.slideSmall = $(this.root).find(".js-wrap-box").width();
            var n = $(this.cloneSlide).clone(!0, !1).removeClass("js-wrap-box").addClass("js-to-scroll"),
              r = $(this.cloneSlide).clone().removeClass().addClass("js-wrap-box").empty();
            $(this.root).find(".js-slider-wrap").empty();
            var l = Math.ceil(this.totalItem / (this.slidesToScroll * this.row)),
              a = 0;
            if (this.row > 1)
              for (var d = 0; d < l; d++) {
                var c = $(r[d]).addClass("is-col");
                if (this.slideToShow <= 0) {
                  var h = this.slideSmall * this.slidesToScroll + this.slideSpacing * (this.slidesToScroll - 1);
                  $(c).css({
                    "min-width": "".concat(h, "px"),
                    "max-width": "".concat(h, "px")
                  })
                }
                $(this.root).find(".js-slider-wrap").append(c);
                for (var p = 0; p < this.row; p++) {
                  var f = $("<div class=' is-row'></div>");
                  $(c).append(f);
                  for (var u = 0; u < this.slidesToScroll; u++) {
                    var S = n[a];
                    0 === u && $(S).css({
                      "margin-left": "0px"
                    }), this.slideToShow > 0 && $(S).css({
                      "min-width": "calc(".concat(1 / this.slidesToScroll * 100, "% - ").concat(parseInt($(S).css("margin-left")), "px)"),
                      "max-width": "calc(".concat(1 / this.slidesToScroll * 100, "% - ").concat(parseInt($(S).css("margin-left")), "px)")
                    }), a++;
                    var m = $(n[0]).clone().removeClass().empty().addClass("js-to-scroll").attr("style", "");
                    f.append(S || m[0])
                  }
                }
              } else
                for (var b = 0; b < l; b++) {
                  var w = r[b];
                  this.slideToShow <= 0 && (h = this.slideSmall * this.slidesToScroll + this.slideSpacing * (this.slidesToScroll - 1), $(w).css({
                    "min-width": "".concat(h, "px"),
                    "max-width": "".concat(h, "px")
                  })), $(this.root).find(".js-slider-wrap").append(w);
                  for (var v = 0; v < this.slidesToScroll; v++) {
                    var g = n[a];
                    0 === v && $(g).css({
                      "margin-left": "0px"
                    }), this.slideToShow > 0 && $(g).css({
                      "min-width": "calc(".concat(1 / this.slidesToScroll * 100, "% - ").concat(parseInt($(g).css("margin-left")), "px)"),
                      "max-width": "calc(".concat(1 / this.slidesToScroll * 100, "% - ").concat(parseInt($(g).css("margin-left")), "px)")
                    }), a++;
                    var j = $(n[0]).clone().removeClass().empty().addClass("js-to-scroll").attr("style", "");
                    w.append(g || j[0])
                  }
                }
          } else if (this.row > 1) {
            this.cloneSlide = $(this.root).find(".js-wrap-box").clone(!0, !1);
            var T = 0,
              x = Math.ceil(this.totalItem / this.row),
              C = $(this.cloneSlide).clone(!0, !1).removeClass("js-wrap-box").css({
                "margin-left": "0px"
              }),
              y = $(this.cloneSlide).clone().removeClass().addClass("js-wrap-box").addClass("is-col").empty();
            $(this.root).find(".js-slider-wrap").empty();
            for (var O = 0; O < x; O++) {
              var I = y[O];
              $(this.root).find(".js-slider-wrap").append(I);
              for (var M = 0; M < this.row; M++) {
                var P = C[T];
                T++, I.append(P || "")
              }
            }
          } else this.cloneSlide = $(this.root).find(".js-wrap-box").clone(!0, !1);
          if (this.slideToShow > 0) {
            var W = this.viewPortWidth / (this.slideToShow / this.slidesToScroll);
            this.slidesToScroll <= 1 && this.row <= 1 && (W -= this.slideSpacing), $(this.root).find(".js-wrap-box").css({
              "min-width": "".concat(W, "px"),
              "max-width": "".concat(W, "px")
            }), this.slideWidth = W
          }
          this.imageWidth = $(this.root).find(".js-wrap-box").width(), this.itemIsShowing = Math.round(this.viewPortWidth / (this.imageWidth / this.slidesToScroll + this.slideSpacing))
        }
        var k = this;
        return $(window).ready((function () {
          k.init()
        })), {
          onUpdate: this.onUpdate.bind(this),
          gotoSlide: this.gotoSlide.bind(this)
        }
      }, t = [{
        key: "init",
        value: function () {
          var s = this;
          if (this.swipe && $(this.root).find(".js-slider-control").on({
              mousedown: this.handleMouseDown,
              touchstart: this.handleMouseDown,
              mousemove: this.handleMove,
              touchmove: this.handleMove,
              mouseup: this.handleEnd,
              touchend: this.handleEnd
            }), this.numberOfStep = Math.ceil(this.totalItem / this.row / this.slidesToScroll), $(this.root).find(".js-wrap-box").on("transitionend", (function (s) {
              s.stopPropagation()
            })), this.infinite) {
            this.count = this.numberOfStep;
            var t = $(this.root).find(".js-wrap-box").clone(!0, !1);
            t.prependTo($(this.root).find(".js-slider-wrap")), t.clone(!0, !1).appendTo($(this.root).find(".js-slider-wrap")), this.numberOfMutiple = $(this.root).find(".js-wrap-box").length, $(this.root).find(".js-slider-wrap").css({
              transition: "transform 0s cubic-bezier(0.1, 0.7, 0.6, 0.9)",
              transform: "translate(-".concat((this.imageWidth + this.slideSpacing) * this.count, "px ,  0px)")
            }), this.handleBullet(), this.handlePagination(), this.handleProgress(), $(this.root).find(".js-slider-wrap").on("transitionend", (function (t) {
              s.count <= 0 || s.count >= s.numberOfMutiple - s.itemIsShowing ? (s.count <= 0 ? s.count = s.numberOfStep : s.count >= s.numberOfMutiple - s.itemIsShowing && (s.count = s.numberOfStep + (s.numberOfStep - s.itemIsShowing), s.count <= 0 && (s.count = s.numberOfStep)), $(s.root).find(".js-slider-wrap").css({
                transition: "transform 0s cubic-bezier(0.1, 0.7, 0.6, 0.9)",
                transform: "translate(-".concat((s.imageWidth + s.slideSpacing) * s.count, "px ,  0px)")
              }), s.onChange && s.onChange(s.count), s.handleBullet(), s.handlePagination(), s.handleProgress(), s.activeFunction && s.handleActiveCurrentSlider()) : s.count > 0 && s.count < s.numberOfMutiple - s.itemIsShowing && s.activeFunction && s.handleActiveCurrentSlider()
            }))
          } else this.activeFunction && $(this.root).find(".js-slider-wrap").on("transitionend", (function (t) {
            s.handleActiveCurrentSlider()
          }));
          if (this.activeFunction && this.handleActiveCurrentSlider(), $(this.root).find(".js-slider-wrap a").on("click", (function (t) {
              s.lastResult && Math.abs(s.lastResult) > 0 && t.preventDefault()
            })), this.renderProgress(), this.renderPagination(), this.renderBullet(), this.bulletSpacing = parseInt($(this.root).find(".js-bullets-item").css("margin-left") ? $(this.root).find(".js-bullets-item").css("margin-left") : 0), $(this.root).find(".js-button-right").addClass("is-active"), this.infinite && $(this.root).find(".js-button-left").addClass("is-active"), this.transformBullet) {
            $(this.root).find(".js-bullets-item:first-child").addClass("is-active"), $(this.root).find(".js-bullets-item:nth-child(2)").addClass("is-near"), $(this.root).find(".js-bullets-item:nth-child(3)").addClass("is-close");
            var i = $(this.root).find(".is-active").width(),
              o = $(this.root).find(".is-near").width(),
              e = $(this.root).find(".is-close").width();
            this.bulletWidth = Math.round((i + 2 * o + 2 * e) / 5);
            var n = 2 * (this.bulletWidth + this.bulletSpacing);
            $(this.root).find(".js-bullets-view").css({
              width: 5 * (this.bulletWidth + this.bulletSpacing) - this.bulletSpacing
            }), $(this.root).find(".js-bullets-wrap").css({
              "padding-left": n,
              "margin-left": "-".concat(this.bulletSpacing, "px")
            })
          } else $(this.root).find(".js-bullets-item:first-child").addClass("is-active"), $(this.root).find(".js-bullets-view").css({
            width: "100%"
          }), $(this.root).find(".js-bullets-wrap").css({
            "padding-left": 0,
            "margin-left": "-".concat(this.bulletSpacing, "px")
          });
          $(window).on("resize", (function (t) {
            if (window.innerWidth !== s.prevWidth) {
              if (s.prevWidth = window.innerWidth, s.viewPortWidth = $(s.root).find(".js-slider-control").width(), s.breakpoint) {
                var i = Object.keys(s.breakpoint).sort((function (s, t) {
                  return s - t
                })).filter((function (s) {
                  return s >= t.currentTarget.innerWidth
                }));
                if (i.length > 0 ? (s.breakpoint[i[0]].slidesToScroll ? (s.prevSlidesToScroll = s.slidesToScroll, s.slidesToScroll = s.breakpoint[i[0]].slidesToScroll) : (s.prevSlidesToScroll = s.slidesToScroll, s.slidesToScroll = s.rootSlidesToScroll), s.breakpoint[i[0]].slideToShow ? s.slideToShow = s.breakpoint[i[0]].slideToShow : s.slideToShow = s.rootSlideToShow) : (s.rootSlidesToScroll && (s.prevSlidesToScroll = s.slidesToScroll, s.slidesToScroll = s.rootSlidesToScroll), s.rootSlideToShow && (s.slideToShow = s.rootSlideToShow)), s.slidesToScroll !== s.prevSlidesToScroll) {
                  if (s.slidesToScroll > 1) {
                    s.slideSmall = $(s.root).find(".js-wrap-box").width();
                    var o = $(s.cloneSlide).clone(!0, !1).removeClass("js-wrap-box").addClass("js-to-scroll"),
                      e = $(s.cloneSlide).clone().removeClass().addClass("js-wrap-box").empty();
                    $(s.root).find(".js-slider-wrap").empty();
                    var n = Math.ceil(s.totalItem / (s.slidesToScroll * s.row)),
                      r = 0;
                    if (s.row > 1)
                      for (var l = 0; l < n; l++) {
                        var a = $(e[l]).addClass("is-col");
                        if (s.slideToShow <= 0) {
                          var d = s.slideSmall * s.slidesToScroll + s.slideSpacing * (s.slidesToScroll - 1);
                          $(a).css({
                            "min-width": "".concat(d, "px"),
                            "max-width": "".concat(d, "px")
                          })
                        }
                        $(s.root).find(".js-slider-wrap").append(a);
                        for (var c = 0; c < s.row; c++) {
                          var h = $("<div class=' is-row'></div>");
                          $(a).append(h);
                          for (var p = 0; p < s.slidesToScroll; p++) {
                            var f = o[r];
                            0 === p && $(f).css({
                              "margin-left": "0px"
                            }), s.slideToShow > 0 && $(f).css({
                              "min-width": "calc(".concat(1 / s.slidesToScroll * 100, "% - ").concat(parseInt($(f).css("margin-left")), "px)"),
                              "max-width": "calc(".concat(1 / s.slidesToScroll * 100, "% - ").concat(parseInt($(f).css("margin-left")), "px)")
                            }), r++;
                            var u = $(o[0]).clone().removeClass().empty().addClass("js-to-scroll").attr("style", "");
                            h.append(f || u[0])
                          }
                        }
                      } else
                        for (var S = 0; S < n; S++) {
                          var m = e[S];
                          s.slideToShow <= 0 && (d = s.slideSmall * s.slidesToScroll + s.slideSpacing * (s.slidesToScroll - 1), $(m).css({
                            "min-width": "".concat(d, "px"),
                            "max-width": "".concat(d, "px")
                          })), $(s.root).find(".js-slider-wrap").append(m);
                          for (var b = 0; b < s.slidesToScroll; b++) {
                            var w = o[r];
                            0 === b && $(w).css({
                              "margin-left": "0px"
                            }), s.slideToShow > 0 && $(w).css({
                              "min-width": "calc(".concat(1 / s.slidesToScroll * 100, "% - ").concat(parseInt($(w).css("margin-left")), "px)"),
                              "max-width": "calc(".concat(1 / s.slidesToScroll * 100, "% - ").concat(parseInt($(w).css("margin-left")), "px)")
                            }), r++, m.append(w || "")
                          }
                        }
                  } else if (s.row > 1) {
                    var v = 0,
                      g = Math.ceil(s.totalItem / s.row),
                      j = $(s.cloneSlide).clone(!0, !1).removeClass("js-wrap-box").css({
                        "margin-left": "0px"
                      }),
                      T = $(s.cloneSlide).clone().removeClass().addClass("js-wrap-box").addClass("is-col").empty();
                    $(s.root).find(".js-slider-wrap").empty();
                    for (var x = 0; x < g; x++) {
                      var C = T[x];
                      $(s.root).find(".js-slider-wrap").append(C);
                      for (var y = 0; y < s.row; y++) {
                        var O = j[v];
                        v++, C.append(O || "")
                      }
                    }
                  } else $(s.root).find(".js-slider-wrap").empty(), $(s.root).find(".js-slider-wrap").append(s.cloneSlide.clone(!0, !1));
                  if (s.infinite) {
                    s.count = Math.ceil(s.totalItem / s.row / s.slidesToScroll);
                    var I = $(s.root).find(".js-wrap-box").clone(!0, !1);
                    I.prependTo($(s.root).find(".js-slider-wrap")), I.clone(!0, !1).appendTo($(s.root).find(".js-slider-wrap")), s.numberOfMutiple = $(s.root).find(".js-wrap-box").length
                  } else s.count = 0
                }
              }
              if (s.slideToShow > 0) {
                var M = s.viewPortWidth / (s.slideToShow / s.slidesToScroll);
                s.slidesToScroll <= 1 && s.row <= 1 && (M -= s.slideSpacing), $(s.root).find(".js-wrap-box").css({
                  "min-width": "".concat(M, "px"),
                  "max-width": "".concat(M, "px")
                }), s.slideWidth = M
              }
              s.itemIsShowing = Math.round(s.viewPortWidth / (s.imageWidth / s.slidesToScroll + s.slideSpacing)), s.activeFunction && s.handleActiveCurrentSlider(), s.slidesToScroll > 1 && s.slideToShow <= 0 && (s.slideSmall = $(s.root).find(".js-to-scroll").width(), d = s.slideSmall * s.slidesToScroll + s.slideSpacing * (s.slidesToScroll - 1), $(s.root).find(".js-wrap-box").css({
                "min-width": "".concat(d, "px"),
                "max-width": "".concat(d, "px")
              })), s.imageWidth = $(s.root).find(".js-wrap-box").width(), s.numberOfStep = Math.ceil(s.totalItem / s.row / s.slidesToScroll), s.renderProgress(), s.renderPagination(), s.renderBullet(), s.infinite || (s.numberOfStep <= 1 ? ($(s.root).find(".js-button-right").css({
                display: "none"
              }), $(s.root).find(".js-button-left").css({
                display: "none"
              })) : ($(s.root).find(".js-button-right").css({
                display: "initial"
              }), $(s.root).find(".js-button-left").css({
                display: "initial"
              }))), s.count > s.numberOfStep && (s.count = s.numberOfStep), s.handleSlide(s.count)
            }
          })), $(this.root).find(".js-button-left").click((function (t) {
            1 != s.infinite && (0 == s.count ? $(t.currentTarget).removeClass("is-active") : $(t.currentTarget).addClass("is-active")), s.count--, s.handleSlide(s.count)
          })), $(this.root).find(".js-button-right").click((function (t) {
            1 != s.infinite && (s.count == s.numberOfStep - 1 ? $(t.currentTarget).removeClass("is-active") : $(t.currentTarget).addClass("is-active")), s.count++, s.handleSlide(s.count)
          })), this.infinite || (this.numberOfStep - 1 <= 0 ? ($(this.root).find(".js-button-right").css({
            display: "none"
          }), $(this.root).find(".js-button-left").css({
            display: "none"
          })) : ($(this.root).find(".js-button-right").css({
            display: "initial"
          }), $(this.root).find(".js-button-left").css({
            display: "initial"
          })))
        }
      }, {
        key: "onUpdate",
        value: function () {
          if (this.totalItem = $(this.root).find(".js-wrap-box").length, this.slideSpacing > 0 && ($(this.root).find(".js-wrap-box").css({
              "margin-left": "".concat(this.slideSpacing, "px")
            }), $(this.root).find(".js-slider-wrap").css({
              "margin-left": "-".concat(this.slideSpacing, "px")
            })), this.slidesToScroll > 1) {
            this.cloneSlide = $(this.root).find(".js-wrap-box").clone(!0, !1), this.slideSmall = $(this.root).find(".js-wrap-box").width();
            var s = $(this.cloneSlide).clone(!0, !1).removeClass("js-wrap-box").addClass("js-to-scroll"),
              t = $(this.cloneSlide).clone().removeClass().addClass("js-wrap-box").empty();
            $(this.root).find(".js-slider-wrap").empty();
            var i = Math.ceil(this.totalItem / (this.slidesToScroll * this.row)),
              o = 0;
            if (this.row > 1)
              for (var e = 0; e < i; e++) {
                var n = $(t[e]).addClass("is-col");
                if (this.slideToShow <= 0) {
                  var r = this.slideSmall * this.slidesToScroll + this.slideSpacing * (this.slidesToScroll - 1);
                  $(n).css({
                    "min-width": "".concat(r, "px"),
                    "max-width": "".concat(r, "px")
                  })
                }
                $(this.root).find(".js-slider-wrap").append(n);
                for (var l = 0; l < this.row; l++) {
                  var a = $("<div class=' is-row'></div>");
                  $(n).append(a);
                  for (var d = 0; d < this.slidesToScroll; d++) {
                    var c = s[o];
                    0 === d && $(c).css({
                      "margin-left": "0px"
                    }), this.slideToShow > 0 && $(c).css({
                      "min-width": "calc(".concat(1 / this.slidesToScroll * 100, "% - ").concat(parseInt($(c).css("margin-left")), "px)"),
                      "max-width": "calc(".concat(1 / this.slidesToScroll * 100, "% - ").concat(parseInt($(c).css("margin-left")), "px)")
                    }), o++;
                    var h = $(s[0]).clone().removeClass().empty().addClass("js-to-scroll").attr("style", "");
                    a.append(c || h[0])
                  }
                }
              } else
                for (var p = 0; p < i; p++) {
                  var f = t[p];
                  this.slideToShow <= 0 && (r = this.slideSmall * this.slidesToScroll + this.slideSpacing * (this.slidesToScroll - 1), $(f).css({
                    "min-width": "".concat(r, "px"),
                    "max-width": "".concat(r, "px")
                  })), $(this.root).find(".js-slider-wrap").append(f);
                  for (var u = 0; u < this.slidesToScroll; u++) {
                    var S = s[o];
                    0 === u && $(S).css({
                      "margin-left": "0px"
                    }), this.slideToShow > 0 && $(S).css({
                      "min-width": "calc(".concat(1 / this.slidesToScroll * 100, "% - ").concat(parseInt($(S).css("margin-left")), "px)"),
                      "max-width": "calc(".concat(1 / this.slidesToScroll * 100, "% - ").concat(parseInt($(S).css("margin-left")), "px)")
                    }), o++, f.append(S || "")
                  }
                }
          } else if (this.row > 1) {
            this.cloneSlide = $(this.root).find(".js-wrap-box").clone(!0, !1);
            var m = 0,
              b = Math.ceil(this.totalItem / this.row),
              w = $(this.cloneSlide).clone(!0, !1).removeClass("js-wrap-box").css({
                "margin-left": "0px"
              }),
              v = $(this.cloneSlide).clone().removeClass().addClass("js-wrap-box").addClass("is-col").empty();
            $(this.root).find(".js-slider-wrap").empty();
            for (var g = 0; g < b; g++) {
              var j = v[g];
              $(this.root).find(".js-slider-wrap").append(j);
              for (var T = 0; T < this.row; T++) {
                var x = w[m];
                m++, j.append(x || "")
              }
            }
          } else this.cloneSlide = $(this.root).find(".js-wrap-box").clone(!0, !1);
          if (this.slideToShow > 0) {
            var C = this.viewPortWidth / (this.slideToShow / this.slidesToScroll);
            this.slidesToScroll <= 1 && this.row <= 1 && (C -= this.slideSpacing), $(this.root).find(".js-wrap-box").css({
              "min-width": "".concat(C, "px"),
              "max-width": "".concat(C, "px")
            }), this.slideWidth = C
          }
          if (this.imageWidth = $(this.root).find(".js-wrap-box").width(), this.slideSpacing = parseInt($(this.root).find(".js-wrap-box").css("margin-left") ? $(this.root).find(".js-wrap-box").css("margin-left") : 0), this.itemIsShowing = Math.round(this.viewPortWidth / (this.imageWidth / this.slidesToScroll + this.slideSpacing)), this.numberOfStep = Math.ceil(this.totalItem / this.row / this.slidesToScroll), this.renderProgress(), this.renderPagination(), this.renderBullet(), this.infinite) {
            this.count = Math.ceil(this.totalItem / this.row / this.slidesToScroll);
            var y = $(this.root).find(".js-wrap-box").clone(!0, !1);
            y.prependTo($(this.root).find(".js-slider-wrap")), y.clone(!0, !1).appendTo($(this.root).find(".js-slider-wrap")), this.numberOfMutiple = $(this.root).find(".js-wrap-box").length
          } else this.count = 0;
          if ($(this.root).find(".js-slider-wrap").css({
              transition: "transform 0s cubic-bezier(0.1, 0.7, 0.6, 0.9)",
              transform: "translate(-".concat((this.imageWidth + this.slideSpacing) * this.count, "px ,  0px)")
            }), this.handleBullet(), this.handlePagination(), this.handleProgress(), this.bulletSpacing = parseInt($(this.root).find(".js-bullets-item").css("margin-left") ? $(this.root).find(".js-bullets-item").css("margin-left") : 0), $(this.root).find(".js-button-right").addClass("is-active"), this.infinite ? $(this.root).find(".js-button-left").addClass("is-active") : $(this.root).find(".js-button-left").removeClass("is-active"), this.transformBullet) {
            $(this.root).find(".js-bullets-item:first-child").addClass("is-active"), $(this.root).find(".js-bullets-item:nth-child(2)").addClass("is-near"), $(this.root).find(".js-bullets-item:nth-child(3)").addClass("is-close");
            var O = $(this.root).find(".is-active").width(),
              I = $(this.root).find(".is-near").width(),
              M = $(this.root).find(".is-close").width();
            this.bulletWidth = Math.round((O + 2 * I + 2 * M) / 5);
            var P = 2 * (this.bulletWidth + this.bulletSpacing);
            $(this.root).find(".js-bullets-view").css({
              width: 5 * (this.bulletWidth + this.bulletSpacing) - this.bulletSpacing
            }), $(this.root).find(".js-bullets-wrap").css({
              "padding-left": P,
              "margin-left": "-".concat(this.bulletSpacing, "px")
            })
          } else $(this.root).find(".js-bullets-item:first-child").addClass("is-active"), $(this.root).find(".js-bullets-view").css({
            width: "100%"
          }), $(this.root).find(".js-bullets-wrap").css({
            "padding-left": 0,
            "margin-left": "-".concat(this.bulletSpacing, "px")
          });
          this.infinite ? this.numberOfStep <= 0 ? ($(this.root).find(".js-button-right").css({
            display: "none"
          }), $(this.root).find(".js-button-left").css({
            display: "none"
          })) : ($(this.root).find(".js-button-right").css({
            display: "initial"
          }), $(this.root).find(".js-button-left").css({
            display: "initial"
          })) : this.numberOfStep - 1 <= 0 ? ($(this.root).find(".js-button-right").css({
            display: "none"
          }), $(this.root).find(".js-button-left").css({
            display: "none"
          })) : ($(this.root).find(".js-button-right").css({
            display: "initial"
          }), $(this.root).find(".js-button-left").css({
            display: "initial"
          }))
        }
      }, {
        key: "gotoSlide",
        value: function (s) {
          this.count = s, this.infinite && (this.count = s + this.numberOfStep), $(this.root).find(".js-slider-wrap").css({
            transition: "transform 0s cubic-bezier(0.1, 0.7, 0.6, 0.9)",
            transform: "translate(-".concat((this.imageWidth + this.slideSpacing) * this.count, "px ,  0px)")
          }), this.handleBullet(), this.handlePagination(), this.handleProgress()
        }
      }, {
        key: "renderProgress",
        value: function () {
          if ($(this.root).find(".js-slider-progress").length > 0) {
            var s = this.count + 1;
            this.infinite && ((s -= this.numberOfStep) <= 0 && (s += this.numberOfStep), s > this.numberOfStep && (s -= this.numberOfStep)), this.infinite ? this.numberOfStep <= 0 ? $(this.root).find(".js-slider-progress").css({
              display: "none"
            }) : ($(this.root).find(".js-slider-progress").css({
              display: "initial"
            }), $(this.root).find(".js-slider-progress").empty(), $(this.root).find(".js-slider-progress").append('<span style="width: '.concat(Math.round(s / this.numberOfStep * 100), '%" class="js-slider-progress-current"></span>'))) : this.numberOfStep - 1 <= 0 ? $(this.root).find(".js-slider-progress").css({
              display: "none"
            }) : ($(this.root).find(".js-slider-progress").css({
              display: "initial"
            }), $(this.root).find(".js-slider-progress").empty(), $(this.root).find(".js-slider-progress").append('<span style="width: '.concat(Math.round(s / this.numberOfStep * 100), '%" class="js-slider-progress-current"></span>')))
          }
        }
      }, {
        key: "renderPagination",
        value: function () {
          if ($(this.root).find(".js-pagination-number").length > 0) {
            $(this.root).find(".js-pagination-number").empty();
            var s = this.count;
            this.infinite && ((s -= this.numberOfStep) < 0 && (s += this.numberOfStep), s >= this.numberOfStep && (s -= this.numberOfStep)), this.infinite ? this.numberOfStep > 0 && $(this.root).find(".js-pagination-number").append("<span class='".concat(this.currentClass ? this.currentClass : "", " js-slider-current'>").concat(s + 1, "</span> <span class='js-slider-dash'>/</span> <span class='js-slider-total'>").concat(this.numberOfStep, "</span>")) : this.numberOfStep - 1 > 0 && $(this.root).find(".js-pagination-number").append("<span class='".concat(this.currentClass ? this.currentClass : "", " js-slider-current'>").concat(s + 1, "</span> <span class='js-slider-dash'>/</span> <span class='js-slider-total'>").concat(this.numberOfStep, "</span>"))
          }
        }
      }, {
        key: "renderBullet",
        value: function () {
          var s = this;
          if ($(this.root).find(".js-bullets-wrap").length > 0) {
            if ($(this.root).find(".js-bullets-wrap").empty(), this.infinite) {
              if (this.numberOfStep > 0)
                for (var t = 1; t <= this.numberOfStep; t++) {
                  var i = '<button class="'.concat(this.bulletClass ? this.bulletClass : "", " js-bullets-item\"><span class='blind'>Go to slide ").concat(t, "</span></button>");
                  $(this.root).find(".js-bullets-wrap").append(i)
                }
            } else if (this.numberOfStep - 1 > 0)
              for (var o = 0; o <= this.numberOfStep - 1; o++) i = '<button class="'.concat(this.bulletClass ? this.bulletClass : "", " js-bullets-item\"><span class='blind'>Go to slide ").concat(o + 1, "</span></button>"), $(this.root).find(".js-bullets-wrap").append(i);
            $(this.root).find(".js-bullets-item").click((function (t) {
              $(s.root).find(".js-bullets-item").removeClass("is-active"), $(t.currentTarget).addClass("is-active"), s.count = s.infinite ? $(t.currentTarget).index() + s.totalItem : $(t.currentTarget).index(), s.handleSlide()
            }))
          }
        }
      }, {
        key: "handleSlide",
        value: function () {
          var s = this.numberOfMutiple ? this.numberOfMutiple : this.numberOfStep - 1;
          1 != this.infinite && (this.count <= 0 ? $(this.root).find(".js-button-left").removeClass("is-active") : $(this.root).find(".js-button-left").addClass("is-active"), this.count >= s ? $(this.root).find(".js-button-right").removeClass("is-active") : $(this.root).find(".js-button-right").addClass("is-active")), this.count < 0 ? this.count = 0 : this.count > s ? this.count = s : ($(this.root).find(".js-slider-wrap").css({
            transition: "transform 0.3s cubic-bezier(0.1, 0.7, 0.6, 0.9)",
            transform: "translate(-".concat((this.imageWidth + this.slideSpacing) * this.count, "px ,  0px)")
          }), this.infinite ? this.count > 0 && this.count < this.numberOfMutiple - this.itemIsShowing && (this.handleBullet(), this.handlePagination(), this.handleProgress(), this.onChange && this.onChange(this.count)) : (this.handleBullet(), this.handlePagination(), this.handleProgress(), this.onChange && this.onChange(this.count)))
        }
      }, {
        key: "handlePagination",
        value: function () {
          if ($(this.root).find(".js-pagination-number").length > 0) {
            var s = this.count;
            this.infinite && ((s -= this.numberOfStep) < 0 && (s += this.numberOfStep), s >= this.numberOfStep && (s -= this.numberOfStep)), $(this.root).find(".js-slider-current").length > 0 && $(this.root).find(".js-slider-current").text(s + 1)
          }
        }
      }, {
        key: "handleActiveCurrentSlider",
        value: function () {
          if ($(this.root).find(".js-wrap-box").length > 0)
            if ($(this.root).find(".js-wrap-box").css({
                transition: ""
              }).removeClass("is-active is-prev is-next"), this.itemIsShowing > 1)
              if (this.slidesToScroll > 1) {
                $(this.root).find(".js-to-scroll").css({
                  transition: ""
                }).removeClass("is-active is-next is-prev");
                for (var s = 0; s < this.itemIsShowing; s++) $(this.root).find(".js-to-scroll:eq(".concat(this.count * this.slidesToScroll + s, ")")).addClass("is-active");
                $(this.root).find(".js-to-scroll:eq(".concat(this.count * this.slidesToScroll + this.itemIsShowing, ")")).addClass("is-next"), this.count > 0 && $(this.root).find(".js-to-scroll:eq(".concat(this.count * this.slidesToScroll - 1, ")")).css({
                  transition: "all 0s cubic-bezier(0.1, 0.7, 0.6, 0.9) 0s"
                }).addClass("is-prev")
              } else {
                $(this.root).find(".js-wrap-box").css({
                  transition: ""
                }).removeClass("is-active is-next is-prev");
                for (var t = 0; t < this.itemIsShowing; t++) $(this.root).find(".js-wrap-box:eq(".concat(this.count + t, ")")).addClass("is-active");
                $(this.root).find(".js-wrap-box:eq(".concat(this.count + this.itemIsShowing, ")")).addClass("is-next"), this.count > 0 && $(this.root).find(".js-wrap-box:eq(".concat(this.count - 1, ")")).css({
                  transition: "all 0s cubic-bezier(0.1, 0.7, 0.6, 0.9) 0s"
                }).addClass("is-prev")
              }
          else this.slidesToScroll > 1 ? ($(this.root).find(".js-to-scroll").css({
            transition: ""
          }).removeClass("is-active is-next is-prev"), $(this.root).find(".js-to-scroll:eq(".concat(this.count * this.slidesToScroll, ")")).addClass("is-active"), $(this.root).find(".js-to-scroll:eq(".concat(this.count * this.slidesToScroll + 1, ")")).addClass("is-next"), this.count > 0 && $(this.root).find(".js-to-scroll:eq(".concat(this.count * this.slidesToScroll - 1, ")")).css({
            transition: "all 0s cubic-bezier(0.1, 0.7, 0.6, 0.9) 0s"
          }).addClass("is-prev")) : ($(this.root).find(".js-to-scroll").css({
            transition: ""
          }).removeClass("is-active is-next is-prev"), $(this.root).find(".js-wrap-box:eq(".concat(this.count, ")")).addClass("is-active"), $(this.root).find(".js-wrap-box:eq(".concat(this.count + 1, ")")).addClass("is-next"), this.count > 0 && $(this.root).find(".js-wrap-box:eq(".concat(this.count - 1, ")")).css({
            transition: "all 0s cubic-bezier(0.1, 0.7, 0.6, 0.9) 0s"
          }).addClass("is-prev"))
        }
      }, {
        key: "handleBullet",
        value: function () {
          if ($(this.root).find(".js-bullets-wrap").length > 0) {
            var s = this.count;
            this.infinite && ((s -= this.numberOfStep) < 0 && (s += this.numberOfStep), s >= this.numberOfStep && (s -= this.numberOfStep)), $(this.root).find(".js-bullets-item").removeClass("is-active is-near is-close"), $(this.root).find(".js-bullets-item:eq(".concat(s, ")")).addClass("is-active"), this.transformBullet && ($(this.root).find(".js-bullets-wrap").css({
              transition: "transform 0.3s cubic-bezier(0.1, 0.7, 0.6, 0.9)",
              transform: "translate(-".concat((this.bulletWidth + this.bulletSpacing) * s, "px ,  0px)")
            }), $(this.root).find(".js-bullets-item:eq(".concat(s + 1, ")")).addClass("is-near"), $(this.root).find(".js-bullets-item:eq(".concat(s + 2, ")")).addClass("is-close"), s > 0 && ($(this.root).find(".js-bullets-item:eq(".concat(s - 1, ")")).addClass("is-near"), s > 1 && $(this.root).find(".js-bullets-item:eq(".concat(s - 2, ")")).addClass("is-close")))
          }
        }
      }, {
        key: "handleProgress",
        value: function () {
          if ($(this.root).find(".js-slider-progress").length > 0) {
            var s = this.count + 1;
            this.infinite && ((s -= this.numberOfStep) <= 0 && (s += this.numberOfStep), s > this.numberOfStep && (s -= this.numberOfStep)), $(this.root).find(".js-slider-progress-current").css({
              width: "".concat(Math.round(s / this.numberOfStep * 100), "%")
            })
          }
        }
      }], t && o(s.prototype, t), Object.defineProperty(s, "prototype", {
        writable: !1
      }), s;
      var s, t
    }();
    return t.default
  }()
}));
